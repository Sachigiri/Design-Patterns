
/*
Singleton Pattern (Java):
Ensures a class has only one instance and provides a global point of access to it.
- Private constructor prevents external instantiation.
- Private static variable holds the single instance.
- Public static method (getInstance) returns the instance.
- Optionally thread-safe for multi-threaded environments.
*/


class Singleton {
    private static Singleton instance;

    private Singleton() {
        // private constructor
    }

    // Standard naming convention for Singleton
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

class Main {
    public static void main(String[] args) {

        Singleton object1 = Singleton.getInstance();
        Singleton object2 = Singleton.getInstance();

        if (object1 == object2) {
            System.out.println("true");
        } else {
            System.out.println("false");
        }
    }
}
