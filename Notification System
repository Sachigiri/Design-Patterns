//below is notification sysytem using observer and startegy pattern

import java.util.*;

// -------------------- 1Ô∏è‚É£ Notification --------------------
interface Notification {
    String getContent();
}

class SimpleText implements Notification {
    private String msg;
    SimpleText(String msg) { this.msg = msg; }
    public String getContent() { return msg; }
}

// -------------------- 2Ô∏è‚É£ Delivery Strategy --------------------
interface DeliveryStrategy {
    void send(String msg);
}

class Email implements DeliveryStrategy {
    public void send(String msg) {
        System.out.println("üìß Email sent ‚Üí " + msg);
    }
}

class SMS implements DeliveryStrategy {
    public void send(String msg) {
        System.out.println("üì± SMS sent ‚Üí " + msg);
    }
}

class Push implements DeliveryStrategy {
    public void send(String msg) {
        System.out.println("üîî Push notification sent ‚Üí " + msg);
    }
}

// -------------------- 3Ô∏è‚É£ Observer Pattern --------------------
interface Observer {
    void update(String msg);
}

interface Subject {
    void add(Observer ob);
    void remove(Observer ob);
    void notifyObservers(String msg);
}

class NotificationCenter implements Subject {
    private List<Observer> observers = new ArrayList<>();

    public void add(Observer ob) { observers.add(ob); }
    public void remove(Observer ob) { observers.remove(ob); }

    public void notifyObservers(String msg) {
        for (Observer o : observers) o.update(msg);
    }

    public void publish(Notification notification) {
        notifyObservers(notification.getContent());
    }
}

// -------------------- 4Ô∏è‚É£ Concrete Observers --------------------
class LoggerObserver implements Observer {
    public void update(String msg) {
        System.out.println("ü™µ [Logger] Message logged ‚Üí " + msg);
    }
}

class DeliveryObserver implements Observer {
    private DeliveryStrategy strategy;
    DeliveryObserver(DeliveryStrategy strategy) { this.strategy = strategy; }

    public void update(String msg) {
        strategy.send(msg);
    }
}

// -------------------- 5Ô∏è‚É£ Client --------------------
public class Main {
    public static void main(String[] args) {

        // Create notification center
        NotificationCenter center = new NotificationCenter();

        // Add observers
        center.add(new LoggerObserver());
        center.add(new DeliveryObserver(new Email()));
        center.add(new DeliveryObserver(new SMS()));
        center.add(new DeliveryObserver(new Push()));

        // Create notification
        Notification notification = new SimpleText("Server restarted successfully.");

        // Publish notification (automatically notifies all observers)
        center.publish(notification);
    }
}
